"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2379],{5680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>u});var t=a(6540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=t.createContext({}),s=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},m=function(e){var n=s(e.components);return t.createElement(d.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=s(a),p=r,u=c["".concat(d,".").concat(p)]||c[p]||g[p]||i;return a?t.createElement(u,l(l({ref:n},m),{},{components:a})):t.createElement(u,l({ref:n},m))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=p;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},6369:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var t=a(8168),r=(a(6540),a(5680));const i={title:"Deathmatch Game"},l=void 0,o={unversionedId:"fun/deathmatch",id:"fun/deathmatch",title:"Deathmatch Game",description:"This command is a replica of the deathmatch command from Yggdrasil.",source:"@site/docs/fun/deathmatch.md",sourceDirName:"fun",slug:"/fun/deathmatch",permalink:"/fun/deathmatch",draft:!1,editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/fun/deathmatch.md",tags:[],version:"current",frontMatter:{title:"Deathmatch Game"},sidebar:"sidebar",previous:{title:"Coin Flip",permalink:"/fun/coinflip"},next:{title:"Duck Image Generator",permalink:"/fun/duck"}},d={},s=[{value:"Trigger",id:"trigger",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Code",id:"code",level:2},{value:"Author",id:"author",level:2}],m={toc:s},c="wrapper";function g(e){let{components:n,...a}=e;return(0,r.yg)(c,(0,t.A)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"This command is a replica of the deathmatch command from Yggdrasil."),(0,r.yg)("h2",{id:"trigger"},"Trigger"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Type:")," ",(0,r.yg)("inlineCode",{parentName:"p"},"Command"),(0,r.yg)("br",null),"\n",(0,r.yg)("strong",{parentName:"p"},"Trigger:")," ",(0,r.yg)("inlineCode",{parentName:"p"},"deathmatch")),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"-deathmatch")," - Play against the default opponent (YAGPDB, unless you changed it in the options)."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"-deathmatch <user>")," - Play against the user provided."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"-deathmatch <user0> <user1>")," - Make the first user play against the second user.")),(0,r.yg)("admonition",{title:"Restrictions",type:"note"},(0,r.yg)("p",{parentName:"admonition"},"To prevent this command from overloading YAGPDB, no more than 5 deathmatch games can be played in a server at any time.")),(0,r.yg)("h2",{id:"configuration"},"Configuration"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"$Emojis"),(0,r.yg)("br",null),"\nA pair of emojis to use for the deathmatch messages. The default values will work fine if you aren't selfhosting.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"$YAG"),(0,r.yg)("br",null),"\nThe default opponent.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\ud83d\udccc ",(0,r.yg)("inlineCode",{parentName:"p"},"$Channels"),(0,r.yg)("br",null),"\nA list of channel IDs to use when executing the command loop, to reduce lag. These can be any channels in your server."))),(0,r.yg)("h2",{id:"code"},"Code"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../src/fun/deathmatch.go.tmpl",file:"../../../src/fun/deathmatch.go.tmpl"},'{{/*\n    A replica of the deathmatch command from Yggdrasil.\n    See <https://yagpdb-cc.github.io/fun/deathmatch> for more information.\n\n    Author: jo3-l <https://github.com/jo3-l>\n*/}}\n\n{{/* Configurable values */}}\n{{$Emojis := cslice "<:battleForward:681735565594460181>" "<:battleBackwards:681735538105253901>"}}\n{{$YAG := .BotUser}}\n\n{{/* Slice of channel IDs to use when executing the command. These can be chosen randomly. */}}\n{{$Channels := cslice 123 234 345}}\n\n{{/* CONFIGURATION VALUES END */}}\n\n{{define "renderEmbed"}}\n    {{$player0 := index .GameData.Players 0}}\n    {{$player1 := index .GameData.Players 1}}\n    {{.Set "Out" (sdict\n        "title" "\ud83d\udca2 Deathmatch"\n        "description" (joinStr "\\n" .GameData.Msgs.StringSlice)\n        "color" 14232643\n        "fields" (cslice\n            (sdict "name" $player0.User.Username "value" (print $player0.HP "/100 HP") "inline" true)\n            (sdict "name" $player1.User.Username "value" (print $player1.HP "/100 HP") "inline" true)\n        )\n    )}}\n{{end}}\n\n{{if not .ExecData}}\n    {{$games := or (dbGet 0 "deathmatch_games").Value 0 | toInt}}\n    {{if gt $games 5}}\n        To prevent overloading YAGPDB, no more than 5 deathmatch games can be played in a server at any time.\n    {{else}}\n        {{$s := dbIncr 0 "deathmatch_games" 1}}\n        {{$args := parseArgs 0 "**Syntax:** `-deathmatch [player1] [player2]`"\n            (carg "member" "player-one")\n            (carg "member" "player-two")\n        }}\n        {{$players := cslice\n            (sdict "User" $YAG "HP" 100)\n            (sdict "User" .User "HP" 100)\n        }}\n        {{with $args.Get 0}} {{$players.Set 0 (sdict "User" .User "HP" 100)}} {{end}}\n        {{with $args.Get 1}} {{$players.Set 1 (sdict "User" .User "HP" 100)}} {{end}}\n\n        {{$gameData := dict\n            "Players" $players\n            "Round" 0\n            "Msgs" (cslice)\n            "ChannelID" .Channel.ID\n        }}\n\n        {{template "renderEmbed" ($query := dict "GameData" $gameData)}}\n        {{$embed := $query.Out}}\n        {{$embed.Set "description" "_Match starting in 3..._"}}\n\n        {{$id := sendMessageRetID nil (cembed $embed)}}\n        {{$gameData.Set "MsgID" $id}}\n\n        {{$c := index $Channels (randInt (len $Channels))}}\n        {{execCC .CCID $c 2 $gameData}}\n    {{end}}\n{{else}}\n    {{$gameData := .ExecData}}\n    {{$idx := mod $gameData.Round 2 | toInt}}\n\n    {{$attacker := index $gameData.Players $idx}}\n    {{$defender := index $gameData.Players (sub 1 $idx)}}\n\n    {{/* compute damage */}}\n    {{$p := randInt 100}}\n    {{$dmg := 0}}\n    {{if lt $p 5}} {{$dmg = randInt 40 50}}\n    {{else if lt $p 15}} {{$dmg = randInt 30 40}}\n    {{else if lt $p 45}} {{$dmg = randInt 20 30}}\n    {{else}} {{$dmg = randInt 1 20}}\n    {{end}}\n\n    {{/* clamp $dmg to defender\'s health so we don\'t get negative HP */}}\n    {{if gt $dmg $defender.HP}} {{$dmg = $defender.HP}} {{end}}\n    {{$defender.Set "HP" (sub $defender.HP $dmg)}}\n\n    {{$m := printf "%s **%s** attacked **%s**, dealing __%d__ damage!"\n        (index $Emojis $idx)\n        $attacker.User.Username\n        $defender.User.Username\n        $dmg\n    }}\n    {{$gameData.Set "Msgs" ($gameData.Msgs.Append $m)}}\n\n    {{if eq $defender.HP 0}}\n        {{$wm := print "\ud83c\udfc6 **" $attacker.User.Username "** has won!"}}\n        {{$gameData.Set "Msgs" ($gameData.Msgs.Append $wm)}}\n        {{$s := dbIncr 0 "deathmatch_games" -1}}\n    {{else}}\n        {{$gameData.Set "Round" (add $gameData.Round 1)}}\n        {{$c := index $Channels (randInt (len $Channels))}}\n        {{execCC .CCID $c 2 $gameData}}\n    {{end}}\n\n    {{/* update embed */}}\n    {{template "renderEmbed" ($query := dict "GameData" $gameData)}}\n    {{editMessage $gameData.ChannelID $gameData.MsgID (cembed $query.Out)}}\n{{end}}\n')),(0,r.yg)("h2",{id:"author"},"Author"),(0,r.yg)("p",null,"This custom command was written by ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/jo3-l"},"@jo3-l"),"."))}g.isMDXComponent=!0}}]);