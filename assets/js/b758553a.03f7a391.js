"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5979],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>v});var l=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=l.createContext({}),d=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return l.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},g=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(n),g=r,v=u["".concat(s,".").concat(g)]||u[g]||c[g]||a;return n?l.createElement(v,i(i({ref:t},p),{},{components:n})):l.createElement(v,i({ref:t},p))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<a;d++)i[d]=n[d];return l.createElement.apply(null,i)}return l.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7026:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var l=n(8168),r=(n(6540),n(5680));const a={title:"Set XP/Level"},i=void 0,o={unversionedId:"leveling/set-xp",id:"leveling/set-xp",title:"Set XP/Level",description:"This command allows administrators to set the experience or level of a user.",source:"@site/docs/leveling/set-xp.md",sourceDirName:"leveling",slug:"/leveling/set-xp",permalink:"/leveling/set-xp",draft:!1,editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/leveling/set-xp.md",tags:[],version:"current",frontMatter:{title:"Set XP/Level"},sidebar:"sidebar",previous:{title:"Reaction Handler",permalink:"/leveling/reaction-handler"},next:{title:"View Leaderboard",permalink:"/leveling/view-leaderboard"}},s={},d=[{value:"Trigger",id:"trigger",level:2},{value:"Usage",id:"usage",level:2},{value:"Code",id:"code",level:2},{value:"Author",id:"author",level:2}],p={toc:d},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,l.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"This command allows administrators to set the experience or level of a user."),(0,r.yg)("h2",{id:"trigger"},"Trigger"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Type:")," ",(0,r.yg)("inlineCode",{parentName:"p"},"Regex"),(0,r.yg)("br",null),"\n",(0,r.yg)("strong",{parentName:"p"},"Trigger:")," ",(0,r.yg)("inlineCode",{parentName:"p"},"\\A(-|<@!?204255221017214977>\\s*)(set-?(xp|level))(\\s+|\\z)")),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"Unless you would like everyone to be able to set experience/level, we advise that you restrict this command to a staff role in the role restrictions.")),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"-setxp <user> <xp>")," - Sets the experience of the user provided."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"-setlevel <user> <level>")," - Sets the level of the user provided.")),(0,r.yg)("admonition",{title:"Aliases",type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Instead of using ",(0,r.yg)("inlineCode",{parentName:"p"},"setxp"),", you can also use ",(0,r.yg)("inlineCode",{parentName:"p"},"set-xp"),". Similarly, in place of ",(0,r.yg)("inlineCode",{parentName:"p"},"setlevel"),", you can also use ",(0,r.yg)("inlineCode",{parentName:"p"},"set-level"),".")),(0,r.yg)("h2",{id:"code"},"Code"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../src/leveling/set_xp.go.tmpl",file:"../../../src/leveling/set_xp.go.tmpl"},'{{/*\n    Sets the XP or level of user.\n    See <https://yagpdb-cc.github.io/leveling/set-xp> for more information.\n\n    Author: jo3-l <https://github.com/jo3-l>\n*/}}\n\n{{ $cmd := reFind `(?i)xp|level` .Cmd }} {{/* The type of command used */}}\n{{ $user := 0 }} {{/* Target user */}}\n{{ $newLvl := 0 }} {{/* Whether user leveled up with these changes */}}\n{{ with .CmdArgs }} {{ $user = index . 0 | userArg }} {{ end }} {{/* We try to resolve user from arguments given */}}\n{{ if and (eq $cmd "level") (eq (len .CmdArgs) 2) }}\n    {{ $level := $.nil }}\n    {{ $valid := false }}\n    {{ with reFind `\\A\\d+\\z` (index .CmdArgs 1) }} {{ $valid = true }} {{ $level = toInt . }} {{ end }}\n    {{ if and $valid $user }}\n        {{ $calculated := mult 100 (mult $level $level) }} {{/* Calculate XP for this level */}}\n        {{ $s := dbSet $user.ID "xp" $calculated }} {{/* Update db */}}\n        {{ $newLvl = $level }} {{/* As user leveled up, we change newLvl */}}\n        {{ printf "Successfully set **%s**\'s level to %d!" $user.String $level }}\n    {{ else }}\n        The syntax for this command is `-setlevel <user> <level>`. \n    {{ end }}\n{{ else if eq (len .CmdArgs) 2 }}\n    {{ $xp := $.nil }}\n    {{ $valid := false }}\n    {{ with reFind `\\A\\d+\\z` (index .CmdArgs 1) }} {{ $valid = true }} {{ $xp = toInt . }} {{ end }}\n    {{ if and $valid $user }}\n        {{ $oldXp := 0 }} {{/* Old XP */}}\n        {{ with (dbGet $user.ID "xp") }} {{ $oldXp = .Value }} {{ end }} {{/* Update old xp with db entry */}}\n        {{ $oldLvl := roundFloor (mult 0.1 (sqrt $oldXp)) }} {{/* Calculate old level */}}\n        {{ $s := dbSet $user.ID "xp" $xp }} {{/* Silence the dbSet */}}\n        {{ $updatedLvl := roundFloor (mult 0.1 (sqrt $xp)) }} {{/* Calculate updated level */}}\n        {{ if ne $oldLvl $updatedLvl }} {{ $newLvl = $updatedLvl }} {{ end }} {{/* If level was updated, update newLvl */}}\n        {{ printf "Successfully set **%s**\'s XP to %d!" $user.String $xp }}\n    {{ else }}\n        The syntax for this command is `-setxp <user> <xp>`.\n    {{ end }}\n{{ else }}\n    The syntax for this command is `-setxp/setlevel <user> <level|xp>`.\n{{ end }}\n{{/* Handle leveling up | Basically the same as whats in the message listener, so if you are curious look at that */}}\n{{ if $newLvl }}\n    {{ $roleRewards := sdict "type" "stack" }}\n    {{ with dbGet 0 "roleRewards" }} {{ $roleRewards = sdict .Value }} {{ end }}\n    {{ $type := $roleRewards.type }}\n    {{ $toAdd := 0 }}\n    {{ $dist := -1 }}\n    {{ range $level, $reward := $roleRewards }}\n        {{- if eq $level "type" }} {{- continue }} {{- end }}\n        {{- if and (le (toInt $level) (toInt $newLvl)) (or (gt $dist (sub (toInt $newLvl) (toInt $level))) (eq $dist -1)) (eq $type "highest") }}\n            {{- $dist = sub (toInt $newLvl) (toInt $level) }} {{- $toAdd = $reward }}\n        {{- end }}\n        {{- if and (ge (toInt $newLvl) (toInt $level)) (not (targetHasRoleID $user $reward)) (eq $type "stack") (ne $level "type") }} {{- giveRoleID $user $reward }}\n        {{- else if and (targetHasRoleID $user $reward) (eq $type "highest") }} {{- takeRoleID $user $reward }} {{- end -}}\n    {{ end }}\n    {{/* TODO: Find a better solution than removing and adding this role */}}\n    {{ if $toAdd }} {{ giveRoleID $user $toAdd }} {{ end }}\n{{ end }}\n')),(0,r.yg)("h2",{id:"author"},"Author"),(0,r.yg)("p",null,"This custom command was written by ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/jo3-l"},"@jo3-l"),"."))}c.isMDXComponent=!0}}]);