"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8392],{5680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>p});var r=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(t),g=i,p=u["".concat(c,".").concat(g)]||u[g]||m[g]||a;return t?r.createElement(p,o(o({ref:n},l),{},{components:t})):r.createElement(p,o({ref:n},l))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},749:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=t(8168),i=(t(6540),t(5680));const a={title:"Counting System"},o=void 0,s={unversionedId:"fun/counting/advanced/counting_v2",id:"fun/counting/advanced/counting_v2",title:"Counting System",description:"This command implements a counting game with detailed statistics and a leaderboard.",source:"@site/docs/fun/counting/advanced/counting_v2.md",sourceDirName:"fun/counting/advanced",slug:"/fun/counting/advanced/counting_v2",permalink:"/fun/counting/advanced/counting_v2",draft:!1,editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/fun/counting/advanced/counting_v2.md",tags:[],version:"current",frontMatter:{title:"Counting System"},sidebar:"sidebar",previous:{title:"Overview",permalink:"/fun/counting/overview"},next:{title:"Counting System",permalink:"/fun/counting/basic/counting"}},c={},d=[{value:"Trigger",id:"trigger",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Code",id:"code",level:2},{value:"Author",id:"author",level:2}],l={toc:d},u="wrapper";function m(e){let{components:n,...t}=e;return(0,i.yg)(u,(0,r.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"This command implements a counting game with detailed statistics and a leaderboard."),(0,i.yg)("p",null,"A unique feature of this command is that, besides decimal numbers, it also accepts roman numerals and mathematical expressions as valid inputs. So if the next number is 2, ",(0,i.yg)("inlineCode",{parentName:"p"},"II")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"2*sin(pi/2)")," would be considered correct as well."),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"Unlike some other counting systems, this command does not delete invalid expressions to allow counting and other conversation to take place concurrently. Expressions which include unaccepted terms or are invalid will, however, trigger a warning message.")),(0,i.yg)("p",null,"The expression must appear on the first line entirely on its own for the count to increase."),(0,i.yg)("h2",{id:"trigger"},"Trigger"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Type:")," ",(0,i.yg)("inlineCode",{parentName:"p"},"Regex"),(0,i.yg)("br",null),"\n",(0,i.yg)("strong",{parentName:"p"},"Trigger:")," ",(0,i.yg)("inlineCode",{parentName:"p"},".+")),(0,i.yg)("admonition",{title:"Restrictions",type:"note"},(0,i.yg)("p",{parentName:"admonition"},"Set this command to ",(0,i.yg)("em",{parentName:"p"},"only run")," in your counting channel in the channel restrictions.")),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Type a number, roman numeral, or a mix of both... with the option of math incrementing by 1, starting with 1, in the counting channel!"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"-CountingStatistics")," - Show server stats for counting"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"-CountingStatistics <user>")," - Show user stats for counting"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"-CountingStatistics Leaderboard")," - Show server leaderboard for number of times counted correct by each user")),(0,i.yg)("admonition",{title:"Math Functionality",type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"To view all available math functions, see ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/ei14/calc#supported-functions-operators-and-constants"},"Supported Functions, Operators, and Constants"))),(0,i.yg)("h2",{id:"configuration"},"Configuration"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"$countTwice"),(0,i.yg)("br",null),"\nWhether to allow users to count multiple times in a row.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"$correctRID"),(0,i.yg)("br",null),"\nID of role for most recent correct counting user.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"$incorrectRID"),(0,i.yg)("br",null),"\nID of role for incorrect counting users.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"$errorCID"),(0,i.yg)("br",null),"\nID of channel for any error output.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"$saves"),(0,i.yg)("br",null),"\nAmount of incorrect expressions which can be sent before the count resets.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"$reactions"),(0,i.yg)("br",null),"\nWhether to enable or disable reaction confirmation."),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"$reactionDelete"),(0,i.yg)("br",null),"\nWhether reactions from past messages should be removed.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"$correctEmoji"),(0,i.yg)("br",null),"\nEmoji to react with on correct messages.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"$warningEmoji"),(0,i.yg)("br",null),"\nEmoji to react with on incorrect messages that use a save.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"$incorrectEmoji"),(0,i.yg)("br",null),"\nEmoji to react with on incorrect messages.")))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"$leaderboardLength"),(0,i.yg)("br",null),"\nMax amount of users that should be displayed on the leaderboard."))),(0,i.yg)("h2",{id:"code"},"Code"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../../../src/fun/counting/advanced/counting_v2.go.tmpl",file:"../../../../../src/fun/counting/advanced/counting_v2.go.tmpl"},'{{/*\n    Count up from 1 using base 10 and/or roman numerals with availability of math\n    View counting statistics with the -cstats command\n    See <https://yagpdb-cc.github.io/fun/counting_v2> for more information.\n    \n    Author: H1nr1 <https://github.com/H1nr1>\n*/}}\n\n{{/* configurable values */}}\n{{ $countTwice := false }} {{/* allow users to count multiple times in a row; true/false */}}\n{{ $correctRID := false }} {{/* correct counting role ID; set to false to disable */}}\n{{ $incorrectRID := false }} {{/* incorrect/blacklist counting role ID; set to false to disable */}}\n{{ $errorCID := .Channel.ID }} {{/* ID of channel to send error reports to; .Channel.ID for current channel */}}\n{{ $saves := 1 }} {{/* how many wrong numbers before reset; set to 0 for no saves */}}\n{{ $reactions := true }} {{/* allow confirmative reactions on message; true/false */}}\n    {{ $reactionDelete := true }} {{/* toggle for reactions to delete from last message; true/false */}}\n    {{ $correctEmoji := "\u2705" }} {{/* emoji to react with if number is correct; if custom, use format name:id */}}\n    {{ $warningEmoji := "\u26a0\ufe0f" }} {{/* emoji to react with if wrong number with available saves; if custom, use format name:id */}}\n    {{ $incorrectEmoji := "\u274c" }} {{/* emoji to react with if number is incorrect; if custom, use format name:id */}}\n{{ $leaderboardLength := 10 }} {{/* how many members to show on leaderboard; max of 100 */}}\n{{/* end of configurable values */}}\n\n{{$db:=or\n    (dbGet 0 "counting").Value\n    (sdict "last" (sdict "user" .BotUser.ID "msg" 0) "next" 1 "highscore" (sdict "user" .BotUser.ID "num" 0 "time" currentTime) "saves" $saves)\n}}\n\n{{with .ExecData}}\n    {{$msg:=getMessage nil .}}\n    {{if not $msg}} {{/* check if message was deleted */}}\n        {{sendMessage nil (cembed\n            "description" (printf "<@%d> deleted their expression which was correct!\\nThe next number is %d"\n                $db.last.user $db.next\n            )\n            "color" 30654\n        )}}\n    {{else if $msg.EditedTimestamp}} {{/* check if message was edited */}}\n        {{sendMessage nil (cembed\n            "description" (printf "<@%d> edited their expression, be careful" $db.last.user)\n            "color" 30654\n        )}}\n    {{end}}\n    {{return}}\n{{end}}\n\n{{if ($re2:=reFindAllSubmatches (print `(?i)\\A(?:-|<@!?` .BotUser.ID `>)\\s*C(?:ount)?(?:ing)?Stat(?:istic)?s?\\s*(?:(?:<@!?)?(\\d{17,})|(l(?:eader)?b))?`) .Cmd)}}\n    {{if not (or (index $re2 0 1) (index $re2 0 2))}} {{/* general stats */}}\n        {{sendMessage nil (cembed\n            "author" (sdict\n                "icon_url" (.Guild.IconURL "512")\n                "name" "\ud83d\udd22 Counting Statistics"\n            )\n            "description" (printf "\u231a __Current Score__: %d\\n\ud83c\udfc5 __High Score__: %d on %v by `%s` (%d)\\n\u23ee\ufe0f __Last Counter__: `%s` (%d)\\n\ud83d\udcbe __Saves Remaining__: %d"\n                (sub $db.next 1)\n                $db.highscore.num (formatTime $db.highscore.time "01/02") ($user:=userArg $db.highscore.user).Username $user.ID\n                ($user =userArg $db.last.user).Username $user.ID\n                $db.saves\n            )\n            "footer" (sdict "text" "Use this command: -CStats [User/\\"Leaderboard\\"]")\n            "color" 30654\n        )}}\n        {{return}}\n    {{end}}\n\n    {{if ($user:=index $re2 0 1|toInt|userArg)}} {{/* user stats */}}\n        {{$userCount:=dbGet $user.ID "counting"}}\n        {{if not $userCount}}\n            {{sendMessage nil (cembed\n                "title" (print "No available stats")\n                "description" (printf "`%s` has yet to count \u2639\ufe0f\\nMaybe give them a heads-up to come join?"\n                    $user.Username\n                )\n                "footer" (sdict "text" "Use this command: -CStats [User: @/ID]")\n                "color" 16711680\n            )}}\n        {{else}}\n            {{$userCount:=toInt $userCount.Value}}\n            {{$userCorrect:=(dbGet $user.ID "countingCorrect").Value}}\n            {{sendMessage nil (cembed\n                "title" (printf "\ud83d\udd22 %s\'s Counting Statistics" $user.Username)\n                "description" (printf "%s has counted **%d times**\\n**%d** have been correct\\nThis makes their average **%.2f%%**"\n                    $user.Mention $userCount (toInt $userCorrect) (div $userCorrect $userCount|mult 100.0)\n                )\n                "footer" (sdict "text" "Use this command: -CStats [User: @/ID]")\n                "color" 30654\n            )}}\n        {{end}}\n\n    {{else if eq (index $re2 0 2|lower) "leaderb" "lb"}} {{/* leaderboard */}}\n        {{$desc:=""}}\n        {{range $i,$v:=dbTopEntries "countingCorrect" $leaderboardLength 0}}\n            {{- $desc =printf "%s\\n#%-3d %4d - %-4s" $desc (add $i 1) (toInt $v.Value) (or (userArg $v.UserID) (str $v.UserID)) -}}\n        {{end}}\n        {{sendMessage nil (cembed\n            "author" (sdict\n                "icon_url" (.Guild.IconURL "512")\n                "name" "Counting Leaderboard"\n            )\n            "description" (printf "```Pos    \u2705  User%s```" $desc)\n            "footer" (sdict "text" "Use this command: -CStats Leaderboard")\n            "color" 30654\n        )}}\n\n    {{else}}\n        {{sendMessage nil (cembed\n            "title" "Invalid Syntax"\n            "description" "For server counting statistics: `-CStats`\\nFor a members\' statistics: `-CStats <User: @/ID>`\\nFor server leaderboard: `-CStats Leaderboard`"\n            "color" 16744192\n        )}}\n    {{end}}\n    {{return}}\n{{end}}\n\n{{if and (eq $db.last.user .User.ID) (not $countTwice)}}\n    {{sendMessage nil (cembed\n        "description" (printf "You can\'t count twice in a row \ud83e\udd72\\nThe next number is %d" $db.next)\n        "color" 16744192\n    )}}\n    {{return}}\n{{end}}\n\n{{$invalid:=false}}\n{{$re:=reFindAll `\\b([%e]|abs|pi)(\\b|$)|[+\\-*/^\u03c0()]|a?(sin|cos|tan|cot|sec|csc)|sqrt|l(o?g|n)|\\d+|[MDCLXVI]M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})` .Cmd}}\n{{if not $re}}\n    {{return}}\n{{end}}\n{{if ne .Cmd (joinStr "" $re)}}\n    {{$invalid =true}}\n{{end}}\n\n{{$convertRN:=sdict "I" 1 "V" 5 "X" 10 "L" 50 "C" 100 "D" 500 "M" 1000}}\n{{$exp:=""}}{{$lastNumeral:=false}}\n{{range $re}}\n    {{- $roman:=reFindAll `[IVXLCDM]` .}}\n    {{- if not $roman}}\n        {{- $exp =printf "%s%s" $exp .}}\n        {{- if reFind `\\d+` .}}\n            {{- if $lastNumeral}}\n                {{- $invalid =true}}{{break}}\n            {{- end}}\n            {{- $lastNumeral =true}}\n        {{- else}}\n            {{- $lastNumeral =false}}\n        {{- end}}\n        {{- continue}}\n    {{- end}}\n    {{- if $lastNumeral}}\n        {{- $invalid =true}}{{break}}\n    {{- end}}\n    {{- $values:=cslice}}{{$value:=0}}{{$skip:=false}}\n    {{- range $roman}}\n        {{- $values =$values.Append ($convertRN.Get .)}}\n    {{- end}}\n    {{- range $i,$v:=$values}}\n        {{- $i =add $i 1}}\n        {{- if $skip}}\n            {{- $skip =false}}\n            {{- continue}}\n        {{- end}}\n        {{- if le (len $values) $i}}\n            {{- $value =add $value .}}\n            {{- continue}}\n        {{- end}}\n        {{- if ge . (index $values $i)}}\n            {{- $value =add $value .}}\n        {{- else}}\n            {{- $value =sub (add $value (index $values $i)) .}}\n            {{- $skip =true}}\n        {{- end}}\n    {{- end}}\n    {{- $exp =printf "%s%d" $exp $value}}\n    {{- $lastNumeral =true}}\n{{end}}\n\n{{$number:=0}}\n{{try}}{{$number =slice ($number =exec "calc" $exp) 9 (len $number|add -1)|toFloat|toInt}}\n{{catch}}{{$invalid =true}}{{end}}\n\n{{if $invalid}}\n    {{sendMessage nil (cembed\n        "description" (printf "`%s` sent an invalid expression, `%s`\\nNext number is `%d`" .User.Username .Cmd $db.next)\n        "color" 16711680\n    )}}\n    {{return}}\n{{end}}\n\n{{$errFormat:="Counting Error: `%s`\\nMessage: %s\\nUser: `%s` (%d)"}}\n\n{{if eq $db.next $number}} {{/* correct */}}\n    {{$db.Set "next" (add $db.next 1)}}\n    {{if $reactions}}\n        {{try}}\n            {{addReactions $correctEmoji}}\n            {{if and $reactionDelete $db.last.msg}}\n                {{deleteMessageReaction nil $db.last.msg .BotUser.ID $correctEmoji}}\n            {{end}}\n            {{if eq (mod $number 100|toInt) 0}}{{addReactions "\ud83d\udcaf"}}{{end}}\n        {{catch}}\n            {{with getRole $incorrectRID}}\n                {{addRole .}}{{removeRole . ((toDuration "1d").Seconds|toInt)}}\n            {{end}}\n            {{sendMessage $errorCID (printf $errFormat . $.Message.Link $.User.Username $.User.ID)}}\n        {{end}}\n    {{end}}\n    {{with getRole $correctRID}}\n        {{takeRole $db.last.user .}}\n        {{addRole .}}\n    {{end}}\n    {{$db.Set "last" (sdict\n        "user" .User.ID\n        "msg" .Message.ID\n    )}}\n\n    {{$s:=dbIncr .User.ID "countingCorrect" 1}}\n    {{$s =dbIncr .User.ID "counting" 1}}\n    {{if gt $number $db.highscore.num}}\n        {{if $reactions}}\n            {{try}}{{addReactions "\ud83c\udfc6"}}{{catch}}{{end}}\n        {{end}}\n        {{$db.Set "highscore" (sdict "user" .User.ID "num" $number "time" currentTime)}}\n    {{end}}\n    {{dbSet 0 "counting" $db}}\n    {{execCC .CCID nil 15 .Message.ID}}\n        \n{{else}} {{/* incorrect */}}\n    {{$db.Set "saves" (sub $db.saves 1)}}\n    {{with getRole $correctRID}}\n        {{takeRole $db.last.user .}}\n    {{end}}\n    {{with getRole $incorrectRID}}\n        {{addRole .}}{{removeRole . ((toDuration "3d").Seconds|toInt)}}\n    {{end}}\n    {{if ge $db.saves 0}} {{/* progress saved */}}\n        {{if $reactions}}\n            {{try}}{{addReactions $warningEmoji}}\n            {{catch}}\n                {{with getRole $incorrectRID}}\n                    {{addRole .}}{{removeRole . ((toDuration "1d").Seconds|toInt)}}\n                {{end}}\n                {{sendMessage $errorCID (printf $errFormat . $.Message.Link $.User.Username $.User.ID)}}\n            {{end}}\n        {{end}}\n        {{$db.Set "last" (sdict "user" .User.ID "msg" .Message.ID)}}\n        {{dbSet 0 "counting" $db}}\n        {{sendMessage nil (cembed\n            "description" (printf "%s sent an incorrect number of %d\\n**But**, the count was saved! %d saves remaining\\nThe next number is %d" .User.Username $number $db.saves $db.next)\n            "color" 16744192\n        )}}\n\n    {{else}} {{/* reset count */}}\n        {{sendMessage nil (cembed\n            "description" (printf "%s sent an incorrect number of %d\\nCorrect number was %d\\nStart over at 1 \ud83d\ude43" .User.Mention $number $db.next)\n            "color" 16711680\n        )}}\n        {{$db.Set "last" (sdict "user" .BotUser.ID "msg" 0)}}\n        {{$db.Set "next" 1}}\n        {{$db.Set "saves" $saves}}\n        {{dbSet 0 "counting" $db}}\n        {{$s:=dbIncr .User.ID "counting" 1}}\n        {{if $reactions}}\n            {{try}}{{addReactions $incorrectEmoji}}\n            {{catch}}\n                {{with getRole $incorrectRID}}\n                    {{addRole .}}{{removeRole . ((toDuration "1d").Seconds|toInt)}}\n                {{end}}\n                {{sendMessage $errorCID (printf $errFormat . $.Message.Link $.User.Username $.User.ID)}}\n            {{end}}\n        {{end}}\n    {{end}}\n{{end}}\n')),(0,i.yg)("h2",{id:"author"},"Author"),(0,i.yg)("p",null,"This custom command was written by ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/H1nr1"},"@H1nr1"),"."))}m.isMDXComponent=!0}}]);