"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4437],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>u});var s=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,s,i=function(e,n){if(null==e)return{};var t,s,i={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=s.createContext({}),c=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return s.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},g=s.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=c(t),g=i,u=p["".concat(l,".").concat(g)]||p[g]||m[g]||r;return t?s.createElement(u,o(o({ref:n},d),{},{components:t})):s.createElement(u,o({ref:n},d))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=g;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[p]="string"==typeof e?e:i,o[1]=a;for(var c=2;c<r;c++)o[c]=t[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}g.displayName="MDXCreateElement"},5518:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=t(8168),i=(t(6540),t(5680));const r={title:"Component Handler"},o=void 0,a={unversionedId:"fun/qotd/advanced/component-handler",id:"fun/qotd/advanced/component-handler",title:"Component Handler",description:"This command handles all button pushes and select menu usage during setup and actual usage of the QOTD system.",source:"@site/docs/fun/qotd/advanced/component-handler.md",sourceDirName:"fun/qotd/advanced",slug:"/fun/qotd/advanced/component-handler",permalink:"/fun/qotd/advanced/component-handler",draft:!1,editUrl:"https://github.com/yagpdb-cc/yagpdb-cc/edit/master/website/docs/fun/qotd/advanced/component-handler.md",tags:[],version:"current",frontMatter:{title:"Component Handler"},sidebar:"sidebar",previous:{title:"Overview",permalink:"/fun/qotd/advanced/overview"},next:{title:"Interval",permalink:"/fun/qotd/advanced/interval"}},l={},c=[{value:"Trigger",id:"trigger",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Code",id:"code",level:2},{value:"Author",id:"author",level:2}],d={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,i.yg)(p,(0,s.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"This command handles all button pushes and select menu usage during setup and actual usage of the QOTD system."),(0,i.yg)("p",null,"For more information about the QOTD system, see ",(0,i.yg)("a",{parentName:"p",href:"overview"},"the overview page"),"."),(0,i.yg)("h2",{id:"trigger"},"Trigger"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Type:")," ",(0,i.yg)("inlineCode",{parentName:"p"},"Component"),(0,i.yg)("br",null),"\n",(0,i.yg)("strong",{parentName:"p"},"Custom ID:")," ",(0,i.yg)("inlineCode",{parentName:"p"},"\\Aqotd-")),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"For best results, do not restrict this command's channels or roles.")),(0,i.yg)("h2",{id:"configuration"},"Configuration"),(0,i.yg)("p",null,"All configuration is done via the ",(0,i.yg)("inlineCode",{parentName:"p"},"qotd setup")," command. Only run the setup command after installing all four CCs in the QOTD\nsystem. See the ",(0,i.yg)("a",{parentName:"p",href:"overview/#configuration"},"QOTD system overview")," for more information."),(0,i.yg)("h2",{id:"code"},"Code"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-gotmpl",metastring:"file=../../../../../src/fun/qotd/advanced/component_handler.go.tmpl",file:"../../../../../src/fun/qotd/advanced/component_handler.go.tmpl"},'{{ define "MissingPerms" }}\n  {{ $yPerms := getTargetPermissionsIn .BotUser.ID .CID }}\n  {{ $missing := cslice }}\n  {{ range $k, $v := .AllPerms }}\n    {{ if and (in $.ReqPerms $v) (ne (bitwiseAnd $yPerms $v) $v) }}\n      {{ $missing = $missing.Append $k }}\n    {{ end }}\n  {{ end }}\n  {{ return joinStr ", " $missing }}\n{{ end }}\n{{ define "ClearCfg" }}\n  {{ $ = . }}\n  {{ $.Del "SuggestionsOpen" }}\n  {{ $.Del "MentionRole" }}\n  {{ $.Del "Sticky" }}\n  {{ $.Del "Publish" }}\n  {{ $.Del "UseThreads" }}\n  {{ $.Set "Xtras" cslice }}\n  {{ return $ }}\n{{ end }}\n\n{{ if eq .StrippedID "suggest" }}\n  {{ $placeholder := print "Ex: " (slice (execAdmin "topic") 2) }}\n  {{ if gt (len $placeholder) 100 }}\n    {{ $placeholder = slice $placeholder 0 101 }}\n  {{ end }}\n  {{ sendModal (sdict "title" "Suggest a question!" "custom_id" "qotd-submit" "fields" (cslice (sdict "label" "Question" "required" true "placeholder" $placeholder))) }}\n  {{ return }}\n{{ end }}\n\n{{ $cfg := dbGet 0 "qotd-config" }}\n{{ with $cfg }}\n  {{ $cfg = .Value }}\n{{ else }}\n  Sorry, please run `{{ .ServerPrefix }}qotd setup` again.\n  {{ return }}\n{{ end }}\n  \n{{ $id := slice .StrippedID 6 }}\n{{ $msg := "" }}\n{{ $comps := cslice }}\n{{ $err := "" }}\n{{ $missingPermsErr := "YAGPDB is missing the following permissions: %s in <#%d>. Please fix the permissions and try again, or choose a different channel." }}\n{{ $allPerms := .Permissions }}\n{{ $basicPerms := cslice $allPerms.ViewChannel $allPerms.SendMessages $allPerms.EmbedLinks }}\n{{ $mainChannel := sdict "Msg" "Select channel for QOTD announcements." "Comps" (cslice (cmenu "type" "channel" "custom_id" "qotd-setup-main_channel" "channel_types" (cslice 0 2 5 10 11 12 15))) }}\n{{ $mainCfg := sdict "Msg" "Choose config options." "Comps" (cslice (sdict "type" "text" "custom_id" "qotd-setup-main_cfg" "placeholder" "Choose config options..." "options" (cslice (sdict "label" "Open Suggestions" "description" "Allow members to suggest questions." "value" "suggestions_open") (sdict "label" "Mention a Role" "description" "Mention a role with QOTDs." "value" "mention_role_bool") (sdict "label" "Sticky Message" "description" "Post a sticky message with current QOTD in QOTD channel/thread." "value" "sticky") (sdict "label" "None" "value" "no_config")))) }}\n{{ $xtraCfg := sdict "Msg" "Select additional configuration." }}\n{{ $publishOpt := sdict "label" "Publish QOTD" "description" "Publish each QOTD." "value" "publish" }}\n{{ $useThreadsOpt := sdict "label" "Use Threads" "description" "Create thread for each QOTD" "value" "use_threads" }}\n{{ $queueChannelMenu := cmenu "type" "channel" "custom_id" "qotd-setup-queue_channel" "placeholder" "Select channel for question queue." "channel_types" (cslice 0 2 5 10 11 12 15) }}\n{{ $mentionRoleMenu := cmenu "type" "role" "custom_id" "qotd-setup-mention_role" "placeholder" "Select role to mention with QOTDs." }}\n\n{{ if in $id "back" }}\n  {{ $cfg.Del "Complete" }}\n{{ end }}\n{{ if in $id "main_channel" }}\n  {{ $msg = $mainChannel.Msg }}\n  {{ $comps = $mainChannel.Comps }}\n  {{ $cfg.Del "PrevCfg" }}\n  {{ if not (hasSuffix $id "-back") }}\n    {{ with getChannel (index .Values 0) }}\n      {{ $missing := execTemplate "MissingPerms" (sdict "CID" .ID "ReqPerms" $basicPerms "AllPerms" $allPerms) }}\n      {{ if $missing }}\n        {{ $err = printf $missingPermsErr $missing .ID }}\n      {{ else }}\n        {{ $cfg.Set "MainChannel" .ID }}\n        {{ $cfg.Set "PrevCfg" "main_channel" }}\n        {{ $cfg.Del "ActiveThread" }}\n        {{ $xtraOpts := cslice }}\n        {{ if eq .Type 15 }}\n          {{ $cfg.Set "ForumMode" true }}\n        {{ else }}\n          {{ $cfg.Del "ForumMode" }}\n          {{ $xtraOpts = $xtraOpts.Append $useThreadsOpt }}\n          {{ if eq .Type 5 }}\n            {{ $xtraOpts = $xtraOpts.Append $publishOpt }}\n          {{ end }}\n        {{ end }}\n        {{ $msg = $mainCfg.Msg }}\n        {{ $comps = $mainCfg.Comps }}\n        {{ $menu := index $comps 0 }}\n        {{ $menu.Set "options" ($xtraOpts.AppendSlice $menu.options) }}\n        {{ $menu.Set "max_values" (len $menu.options) }}\n        {{ $comps.Set 0 (cmenu $menu) }}\n      {{ end }}\n    {{ else }}\n      {{ $err = "Sorry, please try again." }}\n    {{ end }}\n  {{ end }}\n{{ else if in $id "main_cfg" }}\n  {{ $msg = $mainCfg.Msg }}\n  {{ $comps = $mainCfg.Comps }}\n  {{ $xtraOpts := cslice }}\n  {{ if not $cfg.ForumMode }}\n    {{ $xtraOpts = $xtraOpts.Append $useThreadsOpt }}\n    {{ if eq (getChannel $cfg.MainChannel).Type 5 }}\n      {{ $xtraOpts = $xtraOpts.Append $publishOpt }}\n    {{ end }}\n  {{ end }}\n  {{ $menu := index $comps 0 }}\n  {{ $menu.Set "options" ($xtraOpts.AppendSlice $menu.options) }}\n  {{ $menu.Set "max_values" (len $menu.options) }}\n  {{ $comps.Set 0 (cmenu $menu) }}\n  {{ $cfg.Set "PrevCfg" "main_channel" }}\n  {{ if not (hasSuffix $id "-back") }}\n    {{ $xtraCfgComps := cslice }}\n    {{ $cfg = execTemplate "ClearCfg" $cfg }}\n    {{ range $v := .Values }}\n      {{ if eq $v "suggestions_open" }}\n        {{ $cfg.Set "SuggestionsOpen" true }}\n        {{ $cfg.Del "QueueChannel" }}\n        {{ $cfg.Del "QueueMessage" }}\n        {{ $xtraCfgComps = $xtraCfgComps.Append $queueChannelMenu }}\n        {{ $cfg.Set "Xtras" ($cfg.Xtras.Append "queue_channel") }}\n      {{ else if eq $v "mention_role_bool" }}\n        {{ $cfg.Del "MentionRole" }}\n        {{ $xtraCfgComps = $xtraCfgComps.Append $mentionRoleMenu }}\n        {{ $cfg.Set "Xtras" ($cfg.Xtras.Append "mention_role") }}\n      {{ else if eq $v "sticky" }}\n          {{ $cfg.Set "Sticky" (sdict "ID" 0 "ExpiresAt" currentTime "Message" (slice (execAdmin "topic") 2) "Color" (randInt 0x000000 0xFFFFFF) "Cooldown" 30) }}\n      {{ else if eq $v "publish" }}\n        {{ $cfg.Set "Publish" true }}\n      {{ else if eq $v "use_threads" }}\n        {{ $missing := execTemplate "MissingPerms" (sdict "CID" $cfg.MainChannel "ReqPerms" (cslice $allPerms.UsePublicThreads $allPerms.SendMessagesInThreads) "AllPerms" $allPerms) }}\n        {{ if $missing }}\n          {{ $err = printf $missingPermsErr $missing $cfg.MainChannel }}\n        {{ else }}\n          {{ $cfg.Set "UseThreads" true }}\n        {{ end }}\n      {{ else if eq $v "no_config" }}\n        {{ $xtraCfgComps = cslice }}\n        {{ $cfg = execTemplate "ClearCfg" $cfg }}\n        {{ $err = "" }}\n        {{ break }}\n      {{ end }}\n    {{ end }}\n    {{ if not $err }}\n      {{ if $xtraCfgComps }}\n        {{ $cfg.Set "PrevCfg" "main_cfg" }}\n        {{ $msg = $xtraCfg.Msg }}\n        {{ $comps = $xtraCfgComps }}\n      {{ else }}\n        {{ $cfg.Set "Complete" true }}\n      {{ end }}\n    {{ end }}\n  {{ end }}\n{{ else if in $id "queue_channel" }}\n  {{ $cfg.Set "PrevCfg" "main_cfg" }}\n  {{ $msg = $xtraCfg.Msg }}\n  {{ if in $cfg.Xtras "queue_channel" }}\n    {{ $comps = $comps.Append $queueChannelMenu }}\n  {{ end }}\n  {{ if in $cfg.Xtras "mention_role" }}\n    {{ $comps = $comps.Append $mentionRoleMenu }}\n  {{ end }}\n  {{ with getChannel (index .Values 0) }}\n    {{ $missing := execTemplate "MissingPerms" (sdict "CID" .ID "ReqPerms" ($basicPerms.Append $allPerms.ManageMessages) "AllPerms" $allPerms) }}\n    {{ if $missing }}\n      {{ $err = printf $missingPermsErr $missing $cfg.MainChannel }}\n    {{ else }}\n      {{ $cfg.Set "QueueChannel" .ID }}\n      {{ dbSet 0 "qotd-config" $cfg }}\n      {{ execCC $cfg.MainCC nil 0 (sdict "Type" "refresh") }}\n      {{ if or $cfg.MentionRole (not (in $cfg.Xtras "mention_role")) }}\n        {{ $cfg.Set "Complete" true }}\n      {{ end }}\n    {{ end }}\n  {{ else }}\n    {{ $err = "Sorry, please try again." }}\n  {{ end }}\n{{ else if in $id "mention_role" }}\n    {{ $cfg.Set "PrevCfg" "main_cfg" }}\n  {{ $msg = $xtraCfg.Msg }}\n  {{ if in $cfg.Xtras "queue_channel" }}\n    {{ $comps = $comps.Append $queueChannelMenu }}\n  {{ end }}\n  {{ if in $cfg.Xtras "mention_role" }}\n    {{ $comps = $comps.Append $mentionRoleMenu }}\n  {{ end }}\n  {{ $canPingAll := eq (bitwiseAnd (getTargetPermissionsIn $.BotUser.ID $cfg.MainChannel) $allPerms.MentionEveryone) $allPerms.MentionEveryone }}\n  {{ with getRole (index .Values 0) }}\n    {{ if or .Mentionable $canPingAll }}\n      {{ $cfg.Set "MentionRole" .ID }}\n      {{ if or $cfg.QueueChannel (not (in $cfg.Xtras "queue_channel")) }}\n        {{ $cfg.Set "Complete" true }}\n      {{ end }}\n    {{ else }}\n      {{ $err = printf "YAGPDB cannot mention <@&%d>. Give YAGPDB MentionEveryone in <#%d> or allow the role to be mentioned by anyone." .ID $cfg.MainChannel }}\n    {{ end }}\n  {{ else }}\n    {{ $err = "Sorry, please try again." }}\n  {{ end }}\n{{ else if eq $id "delete" }}\n  {{ deleteTrigger 0 }}\n  {{ ephemeralResponse }}\n  Done!\n  {{ return }}\n{{ end }}\n{{ $embed := sdict "title" "QOTD Setup" "color" 0x93e9be }}\n{{ if $err }}\n  {{ $embed.Set "description" (printf "%s\\n\\n%s" (trimSpace $err) $msg) }}\n  {{ $embed.Set "color" 0xcc0000 }}\n{{ else }}\n  {{ $embed.Set "description" $msg }}\n{{ end }}\n{{ if $cfg.Complete }}\n  {{ $embed.Set "description" "Done setup! Run setup again any time to reconfigure." }}\n  {{ $embed.Set "color" 0x527826 }}\n  {{ $comps = $comps.Append (cbutton "label" "Finish" "custom_id" "qotd-setup-delete" "style" "green") }}\n{{ end }}\n{{ with $cfg.PrevCfg }}\n  {{ $comps = $comps.Append (cbutton "label" "Back" "custom_id" (print "qotd-setup-" . "-back") "style" "grey") }}\n{{ end }}\n{{ $m := sdict "embed" $embed "components" $comps }}\n{{ updateMessage (complexMessageEdit $m) }}\n{{ if in $id "queue_channel" }}\n  {{/* Prevent an execCC race condition when configuring queue channel message */}}\n  {{ sleep 3 }}\n  {{ $maybeNewCfg := dbGet 0 "qotd-config" }}\n  {{ if ne ( $n := $maybeNewCfg.Value.QueueMessage | toInt64 ) ( $o := $cfg.QueueMessage | toInt64 ) }}\n    {{ $cfg.Set "QueueMessage" ( or $n $o ) }}\n  {{ end }}\n{{ end }}\n{{ dbSet 0 "qotd-config" $cfg }}\n')),(0,i.yg)("h2",{id:"author"},"Author"),(0,i.yg)("p",null,"This custom command was written by ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/SoggySaussages"},"@SoggySaussages"),"."))}m.isMDXComponent=!0}}]);